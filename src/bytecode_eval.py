from bytecode_gen import do_codegen, codegen
from parser import *

HALT, NOP, PUSH, POP, ADD, SUB, MUL, NEG = range(8)

def execute_bytecode(insns):
    ip = 0
    operand = []
    
    def push(x):
        operand.append(x)
    
    def pop():
        return operand.pop()
    
    while True:
        opcode = insns[ip]
        if opcode == HALT:
            break
        elif opcode == NOP:
            pass
        elif opcode == PUSH:
            ip += 1
            push(insns[ip])
        elif opcode == ADD:
            r = pop()
            l = pop()
            push(l + r)
        elif opcode == SUB:
            r = pop()
            l = pop()
            push(l - r)
        elif opcode == MUL:
            r = pop()
            l = pop()
            push(l * r)
        elif opcode == NEG:
            l = pop()
            push(-l)
        ip += 1
    
    return pop()

if __name__ == "__main__":
    # Example input code
    input_code = "3 + 5 *2"

    # Parse the input code to generate an AST
    ast, scope = parse(input_code)
    pprint(ast)

    # Generate bytecode from the AST
    bytecode = codegen(ast)

    # Print the generated bytecode
    print("Generated Bytecode:", bytecode)

    # evaluated bytecode
    print("Executed code:",execute_bytecode(bytecode))